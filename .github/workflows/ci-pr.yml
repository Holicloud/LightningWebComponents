# Unique name for this workflow
name: Validate PR on dev branch

# Definition when the workflow should run
on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Run on a prerelease org?"
        required: false
        type: boolean
  pull_request:
    types: [opened, edited, synchronize, reopened]

# Jobs to be executed
jobs:
  # Dummy job used to skip CI run on automated PRs
  skip-ci:
    if: github.actor == 'trailheadapps-bot'
    runs-on: ubuntu-latest
    steps:
      - name: Noop
        run: |
          echo "Skipping CI run for automated PRs."

  # Formatting and linting only runs on human-submitted PRs
  format-lint-lwc-tests:
    if: github.actor != 'trailheadapps-bot'
    runs-on: ubuntu-latest
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Install Volta to enforce proper node and package manager versions
      - name: "Install Volta"
        uses: volta-cli/action@v4

      # Cache node_modules to speed up the process
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: HUSKY=0 npm ci # Prefer `npm ci` for reproducible build

      # Prettier formatting
      - name: "Code formatting verification with Prettier"
        run: npm run prettier:verify

      # Lint LWC / Aura
      - name: "Lint Lightning Web Components / Aura Components"
        run: npm run lint

      # LWC unit tests
      - name: "Unit test Lightning Web Components"
        run: npm run test:unit:coverage

      # Run PMD scan
      - name: Install PMD
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.0.0/pmd-dist-7.0.0-bin.zip
          unzip pmd-dist-7.0.0-bin.zip

      - name: Validate with PMD
        run: |
          PMD_APEX_ROOT_DIRECTORY=$(pwd) ./pmd-bin-7.0.0/bin/pmd check -R .pmd/rulesets/apex.xml --no-cache --dir force-app,force-app-examples --no-progress

      # Upload code coverage data
      - name: "Upload code coverage for LWC to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: LWC

  # Auto merge Dependabot PRs for:
  # - patch updates on prod dependencies
  # - minor updates on dev dependencies
  dependabot-auto-merge:
    # Only run for Dependabot PRs
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs: format-lint-lwc-tests
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: "Fetch Dependabot metadata"
        id: dependabot
        uses: dependabot/fetch-metadata@v2

      - name: "Check auto merge conditions"
        id: auto-merge
        if: |
          (
            steps.dependabot.outputs.update-type == 'version-update:semver-patch' &&
            contains('direct:production,indirect:production', steps.dependabot.outputs.dependency-type)
          ) || (
            contains('version-update:semver-minor,version-update:semver-patch', steps.dependabot.outputs.update-type) &&
            contains('direct:development,indirect:development', steps.dependabot.outputs.dependency-type)
          )
        run: echo "::notice ::auto-merge conditions satisfied"

      - name: "Approve and merge PR"
        if: steps.auto-merge.conclusion == 'success'
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --auto --rebase "$PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}

  scratch-org-test:
    runs-on: ubuntu-latest
    needs: format-lint-lwc-tests
    if: github.actor != 'dependabot[bot]'
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          npm install @salesforce/cli --location=global
          nodeInstallPath=$(npm config get prefix)
          echo "$nodeInstallPath/bin" >> $GITHUB_PATH
          sf --version

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_SFDX_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

      # Create scratch org
      - name: "Create scratch org"
        if: ${{ !env.IS_PRERELEASE }}
        run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

      # Deploy source to scratch org
      - name: "Push source to scratch org"
        run: sf project deploy start

      # Assign permissionset
      - name: "Assign permissionset to default user"
        run: sf org assign permset -n LWCRecipes

      # # Import sample data
      # - name: "Import sample data"
      #   run: sf data tree import -p ./data/data-plan.json

      # Run Apex tests in scratch org
      - name: "Run Apex tests"
        run: sf apex test run -c -r human -d ./tests/apex -w 20

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: Apex

      # Housekeeping
      - name: "Delete scratch org"
        if: always()
        run: sf org delete scratch -p -o scratch-org
